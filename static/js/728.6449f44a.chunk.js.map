{"version":3,"file":"static/js/728.6449f44a.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // const timerId = setInterval(updateChar, 5000);\n\n    // return () => {\n    //   clearInterval(timerId);\n    // };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(260);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList([...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgSize = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\n        item.thumbnail ===\n          \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\n      ) {\n        imgSize = { objectFit: \"unset\" };\n      }\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={i}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyUp={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgSize} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        onClick={() => onRequest(offset)}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./charInfo.scss\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgSize = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgSize = { objectFit: \"contain\" };\n  }\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgSize} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({ error: false });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n  return (\n    <>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />\n        </ErrorBoundary>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","_jsxs","className","children","_jsx","src","alt","style","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgSize","tabIndex","ref","el","onCharSelected","onKeyUp","e","key","renderItems","disabled","display","_Fragment","comics","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","Component","selectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}